<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://1078889045.github.io</id>
    <title>POM Notes</title>
    <updated>2023-04-21T06:02:59.988Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://1078889045.github.io"/>
    <link rel="self" href="https://1078889045.github.io/atom.xml"/>
    <subtitle>活到老学到老</subtitle>
    <logo>https://1078889045.github.io/images/avatar.png</logo>
    <icon>https://1078889045.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, POM Notes</rights>
    <entry>
        <title type="html"><![CDATA[📣💨✨小技巧备忘录（09）搞起😎]]></title>
        <id>https://1078889045.github.io/post/xiao-ji-qiao-bei-wang-lu-09-gao-qi/</id>
        <link href="https://1078889045.github.io/post/xiao-ji-qiao-bei-wang-lu-09-gao-qi/">
        </link>
        <updated>2023-04-11T02:22:31.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>如何生成.net应用安装程序（脱机）？</p>
</blockquote>
<h2 id="安装部署">安装部署</h2>
<ol>
<li>执行setup.exe，自动安装.net framework 4.6.2（已安装则跳过） + 执行MESServerSetup.msi；</li>
<li>若系统本身已安装.net framework 4.6.2，则可直接执行MESServerSetup.msi；</li>
</ol>
<h3 id="tips">tips:</h3>
<ol>
<li>如果是windows 7系统，提示“无法验证文件的发行者”或者“时间戳签名和或证书无法验证或已损坏”，<br>
则可安装<b>Windows6.1-KB2813430-x64.msu</b>补丁；</li>
<li>如果是windows7系统，提示“已处理证书链，但是在不受信任提供程序信任的根证书中终止”，<br>
则可导入<b>MicrosoftRootCertificateAuthority2011.cer</b>证书至受信任的根证书颁发机构；</li>
</ol>
<h2 id="适用范围">适用范围</h2>
<p>.NET Framework 4.6.2 (脱机安装程序) 支持以下操作系统：</p>
<pre><code class="language-text">Windows 7 SP1 (x86 和 x64)

Windows 8.1 (x86 和 x64)

Windows 10 (x86 和 x64)

Windows 10x86 和 x64 (11 月)

WindowsServer 2008 SP2 (x64)

WindowsServer 2008 R2 SP1 (x64)

Windows Server 2012 (x64)

Windows Server 2012R2 (x64)
</code></pre>
<p>具体可参考<a href="https://learn.microsoft.com/zh-cn/dotnet/framework/install/guide-for-developers">文档</a></p>
<h2 id="开发手册">开发手册</h2>
<ol>
<li>下载<a href="https://dotnet.microsoft.com/zh-cn/download/dotnet-framework">dotnet-framework</a>，例如下载<b>4.6.2版本</b>；</li>
<li>将<b>ndp462-kb3151800-x86-x64-allos-enu.exe</b>复制到<br>
<b>C:\Program Files (x86)\Microsoft SDKs\ClickOnce Bootstrapper\Packages\DotNetFX462</b>,<br>
将<b>ndp462-kb3151800-x86-x64-allos-chs.exe</b>复制到<b>\zh-Hans</b>；</li>
<li>打开项目，右键Setup-属性，点击Prerequisites，选择要安装的系统必备组件<b>Microsoft .NET Framework 4.6.2（x86和x64）</b>,<br>
并勾选<b>从与我的应用程序相同的位置下载系统必备组件</b>，应用并右键Setup生成，<br>
等待打包完成（<b>setup.exe+MESServerSetup.msi+DotNetFX462文件夹</b>）；</li>
</ol>
<h3 id="tips-2">tips:</h3>
<ol>
<li>打开项目，右键Setup-Add，可将添加需要打包的内容，例如项目输出-主输出、文件（静态的资源文件）等；</li>
<li>具体可参考<a href="https://learn.microsoft.com/zh-cn/previous-versions/visualstudio/visual-studio-2010/k3bb4tfd(v=vs.100)">文档</a>；</li>
</ol>
<h1 id="font-size3-̇-̇font"><font size=3>✧⁺⸜(●˙▾˙●)⸝⁺✧</font></h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[📣💨✨小技巧备忘录（08）搞起😎]]></title>
        <id>https://1078889045.github.io/post/xiao-ji-qiao-bei-wang-lu-08-gao-qi/</id>
        <link href="https://1078889045.github.io/post/xiao-ji-qiao-bei-wang-lu-08-gao-qi/">
        </link>
        <updated>2023-03-31T04:28:08.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>如何免魔法使用新必应（New bing），白嫖最新Chatgpt 4.0？</p>
</blockquote>
<ol>
<li>
<p>打开浏览器，访问这个链接：<br>
<a href="https://learn.microsoft.com/zh-cn/training/modules/implement-common-integration-features-finance-ops/10-exercise-1?_blank">Microsoft提供的基于 Web 的免费虚拟机环境</a></p>
</li>
<li>
<p>打开网页后，点击页面上的“启动VM模式”<br>
<img src="https://1078889045.github.io/post-images/1680237871196.jpg" alt="" loading="lazy"><br>
这个时候，系统将提示你要登录微软账号，登陆即可。若没有账号，请自行注册。</p>
 <p style="color:red;">Ⅰ 建议使用邮箱注册，避免使用电话号码，不要问为什么</p>
 <p style="color:red;">Ⅱ 登录时注意登录区域是否为漂亮国（默认是），如果不是，请选为漂亮国，不要问为什么</p>
</li>
<li>
<p>继续直至登录成功，系统将加载并显示桌面登录界面<br>
<img src="https://1078889045.github.io/post-images/1680238977462.png" alt="" loading="lazy"></p>
</li>
<li>
<p>点击右侧“Resource”，查看用户名密码，输入密码登录远程桌面<br>
<img src="https://1078889045.github.io/post-images/1680239215477.png" alt="" loading="lazy"></p>
 <p style="color:orange;">这是微软为用户提供的免费云电脑，配置为6核12G内存，拥有国外网络。</p>
</li>
<li>
<p>打开云桌面的Edge浏览器，在地址栏中输入：www.bing.com/new，即可访问New Bing官网。<br>
<img src="https://1078889045.github.io/post-images/1680239639912.png" alt="" loading="lazy"></p>
 <pre style="color:steelblue;">
 再次输入微软账号进行登录。
 登录成功后，系统会提示您注册New Bing成功。
 可能需要等待一段时间，也可能立即成功。
 请留意邮箱中的通知。
 </pre>
</li>
</ol>
<h1 id="font-size3-̇-̇font"><font size=3>✧⁺⸜(●˙▾˙●)⸝⁺✧</font></h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[📣💨✨小技巧备忘录（07）搞起😎]]></title>
        <id>https://1078889045.github.io/post/xiao-ji-qiao-bei-wang-lu-07-gao-qi/</id>
        <link href="https://1078889045.github.io/post/xiao-ji-qiao-bei-wang-lu-07-gao-qi/">
        </link>
        <updated>2022-12-08T06:52:50.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>如何在解析DM码？</p>
</blockquote>
<ol>
<li>优化图片亮度及对比度；</li>
<li>使用opencv加载图片并生成灰度图等；</li>
<li>使用pylibdmtx解码；</li>
</ol>
<pre><code class="language-Python">        # -*-coding:utf-8 -*-
        import time
        import cv2
        # import numpy as np
        from pylibdmtx import pylibdmtx
        # import math
        import sys

        def func(path): 
            # 加载图片
            img = cv2.imread(path, cv2.IMREAD_UNCHANGED)
            # 灰度图、模糊图片、提取边缘、边缘膨胀、边缘细化
            imgGray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
            # 解析二维码
            all_barcode_info = pylibdmtx.decode(imgGray)
            if len(all_barcode_info) &gt; 0: result = all_barcode_info[0].data.decode(&quot;utf-8&quot;)
            return result

        if __name__ == '__main__':
            t0 = time.time()
            print(func(sys.argv[1]))
            print(time.time() - t0)
</code></pre>
<h1 id="font-size3-̇-̇font"><font size=3>✧⁺⸜(●˙▾˙●)⸝⁺✧</font></h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[📣💨✨小技巧备忘录（06）搞起😎]]></title>
        <id>https://1078889045.github.io/post/xiao-ji-qiao-bei-wang-lu-06-gao-qi/</id>
        <link href="https://1078889045.github.io/post/xiao-ji-qiao-bei-wang-lu-06-gao-qi/">
        </link>
        <updated>2021-10-11T02:33:20.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>SVN使用教程总结</p>
</blockquote>
<h1 id="svn简介">SVN简介</h1>
<ol>
<li>SVN（Subversion） 是一个自由/开源的版本控制系统，一组文件存放在中心版本库，记录每一次文件和目录的修改，SVN允许把数据恢复到早期版本，或是检查数据修改的历史，SVN可以通过网络访问它的版本库，从而使用户在不同的电脑上进行操作。</li>
<li>通常情况下由 VisualSVN server 服务端和 TortoiseSVN客户端搭配使用。</li>
</ol>
<p>💭  <u>VisualSVN server 服务端如何安装和使用不多做介绍，可在网上查阅资料。</u></p>
<h1 id="svn客户端如何安装和使用">SVN客户端如何安装和使用</h1>
<h2 id="安装">安装</h2>
<ul>
<li>下载“TortoiseSVN”，然后进行安装，安装完成后右键可以看到如下：<br>
<img src="https://1078889045.github.io/post-images/1633920350657.png" alt="" loading="lazy"><br>
<em><strong>说明SVN已经安装成功 ~</strong></em></li>
</ul>
<h2 id="使用">使用</h2>
<h3 id="svn检出checkout">SVN检出（Checkout）</h3>
<ol>
<li>右键 → SVN Checkout → 弹出如下窗口：<br>
<img src="https://1078889045.github.io/post-images/1633921293003.png" alt="" loading="lazy"></li>
<li>URL of repository 输入版本库具体项目的地址，Checkout directory 输入检出目录，点击OK按钮进行检出。<br>
💡 <em><strong>首次检出可能需要进行用户名密码验证，验证成功后方可执行下载。</strong></em></li>
<li>成功检出后，在指定检出目录会有.svn隐藏目录以及项目文件。<br>
⚠️ <em><strong>.svn这个隐藏目录记录着两项关键信息：工作文件的基准版本和一个本地副本最后更新的时间戳，千万不要手动修改或者删除这个.svn隐藏目录和里面的文件!!,否则将会导致你本地的工作拷贝(静态试图)被破坏，无法再进行操作。</strong></em></li>
</ol>
<h3 id="增加add">增加（Add）</h3>
<figure data-type="image" tabindex="1"><img src="https://1078889045.github.io/post-images/1633922424128.jpg" alt="" loading="lazy"></figure>
<ul>
<li>💡 <em><strong>在检出目录下新增一个文件，对该文件执行“Add”操作后，执行“SVN Commit”才会提交至版本库中。</strong></em></li>
</ul>
<h3 id="删除delete">删除（Delete）</h3>
<ol>
<li>如果被删除的文件还未入版本库，则可以直接使用操作系统的删除操作删除该文件；</li>
<li>如果被删除的文件已入版本库，则删除的方法如下：<br>
<img src="https://1078889045.github.io/post-images/1633923464567.jpg" alt="" loading="lazy"><br>
💡 <em><strong>执行“SVN Commit”将删除这个动作提交至版本库中时，其他人员更新才会删除此文件。</strong></em><br>
⚠️ <em><strong>尽量不要随意删除文件。</strong></em></li>
</ol>
<h3 id="重命名rename">重命名（Rename）</h3>
<ul>
<li>⚠️ <em><strong>操作同删除类似，尽量不要随意重命名文件或文件夹</strong></em></li>
</ul>
<h3 id="svn还原svn-revert">SVN还原（SVN Revert）</h3>
<ul>
<li>右键后在TortoiseSVN弹出菜单选择“Update to reversion…”，然后弹出窗口如下：<br>
<img src="https://1078889045.github.io/post-images/1633924182649.png" alt="" loading="lazy"><br>
Revision 输入要回退到哪个版本的版本号，点击OK进行回退。</li>
</ul>
<h3 id="检查更新check-for-modifications">检查更新（Check for modifications）</h3>
<ul>
<li>此功能可以显示你所做的修改有哪些还没有提交的，此功能不光能看到对文件的修改变化，所有的变化都能看到，包括增加文件或者目录，删除文件或者目录，移动文件或者目录等，如果你点击了检查版本库，那你还可以看到版本库里的改动，既别人提交了哪些文件的改动，你还没更新到本地。</li>
</ul>
<h3 id="svn更新svn-update">SVN更新(SVN Update)</h3>
<ul>
<li>更新本地代码与SVN服务器上最新的版本一致，只要在需要更新的文件夹上点击右键或者在文件下空白处点击右键，选择”SVN Update” (获取指定版本中的内容，点击右键执行SVN菜单中的“Update to reversion“)，就可以了。<br>
💡 <em><strong>对于每个冲突的文件Subversion在你的目录下放置了三个文件，xxx.mine 是冲突前自己的文件，xxx.r4 是冲突前本地的版本文件，xxx.r5  是别人赶在你之前提交的版本，手动解决冲突即可。</strong></em><br>
💡 <em><strong>保证先更新再提交（大概率避免冲突），最好不要修改他人的代码（协商后进行修改、提交及更新）。</strong></em></li>
</ul>
<h3 id="svn提交svn-commit">SVN提交（SVN Commit）</h3>
<ul>
<li>SVN的提交是将在工作空间做的修改进行提交，包括文件内容的修改，文件或目录的添加，删除，命名，移动等操作。<br>
<img src="https://1078889045.github.io/post-images/1633925706404.png" alt="" loading="lazy"><br>
💡 <em><strong>最好是按模块进行提交，并在Message中输入新增或修改的内容（简单描述即可）。</strong></em><br>
⚠️ <em><strong>无用的文件或文件夹不要进行提交（可使用“Unversion and add to ignore list”设置忽略），例如：bin文件夹及其下所有文件、obj文件夹及其下所有文件以及其它文件或文件夹</strong></em><br>
<img src="https://1078889045.github.io/post-images/1633926016774.png" alt="" loading="lazy"></li>
</ul>
<h3 id="显示日志show-log">显示日志（Show log）</h3>
<ul>
<li>通过此功能可以查到谁，什么时候，对那个目录下的那些文件进行了那些操作。</li>
</ul>
<h3 id="版本库浏览repo-browser">版本库浏览(Repo-browser)</h3>
<ul>
<li>此功能是用来浏览需要查看的资料库，在本地文件夹下点击右键，选择TortoiseSVN → Repo-browser，在弹出的对话框中输入资料库地址，再输入用户名和密码，就能查看到你需要查看到版本库的内容，在这你还能看到哪些文件被谁锁定了。</li>
</ul>
<h2 id="️️-️注意事项重申一遍">❗️❕❗️ <em><strong>️注意事项重申一遍</strong></em> 📣👁‍🗨</h2>
<ul>
<li>新增文件不要忘记执行“Add”操作</li>
<li>尽量不要删除已在版本库中的文件和文件夹（协商后进行删除、提交及更新）</li>
<li>尽量不要重命名已在版本库中的文件和文件夹（协商后进行重命名、提交及更新）</li>
<li>保证先更新再提交（大概率避免冲突），如有发生冲突，手动解决冲突后再提交</li>
<li>最好不要修改他人的代码（协商后进行修改、提交及更新）</li>
<li>最好是按模块进行提交，并在Message中输入新增或修改的内容（简单描述即可）</li>
<li>无用的文件或文件夹不要进行提交</li>
</ul>
<h1 id="font-size3-colorred持续更新中欢迎补充~font"><font size=3 color=red>持续更新中，欢迎补充~</font></h1>
<h1 id="font-size3-̇-̇font"><font size=3>✧⁺⸜(●˙▾˙●)⸝⁺✧</font></h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[📣💨✨小技巧备忘录（05）搞起😎]]></title>
        <id>https://1078889045.github.io/post/xiao-ji-qiao-bei-wang-lu-05-gao-qi/</id>
        <link href="https://1078889045.github.io/post/xiao-ji-qiao-bei-wang-lu-05-gao-qi/">
        </link>
        <updated>2021-07-15T05:38:20.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>如何将Telerik文档下载到本地？</p>
</blockquote>
<h1 id="普通模式">普通模式</h1>
<ol>
<li>访问Telerik文档，如下图：<br>
<img src="https://1078889045.github.io/post-images/1626327825634.png" alt="" loading="lazy"></li>
<li>点击页面右侧超链接<u>Improve this article</u>进入文档存放的GitHub仓库，如下图：<br>
<img src="https://1078889045.github.io/post-images/1626328069887.png" alt="" loading="lazy"></li>
<li>点击Code按钮Clone代码；
<ul>
<li>git clone 地址</li>
<li>Open with GitHub Desktop</li>
<li>Download Zip</li>
<li>其他方式</li>
</ul>
</li>
<li>代码Clone到本地后，使用HBuilder X或者VS Code打开项目，选择相应的md文件进行预览即可，如下图：<br>
<img src="https://1078889045.github.io/post-images/1626328880062.png" alt="" loading="lazy"></li>
</ol>
<h1 id="进阶模式有兴趣可尝试">进阶模式（有兴趣可尝试）</h1>
<h2 id="with-docker">with Docker</h2>
<ol>
<li>git clone git@github.com:telerik/docs-seed.git</li>
<li>打开Git Bash，输入cd /d/docs-seed-master</li>
<li>sh copy_local.sh &quot;d:\xaml-docs-master&quot;</li>
<li>cd /d/xaml-docs-master</li>
<li>sh start-docs.sh</li>
</ol>
<h2 id="without-docker">without Docker</h2>
<ol>
<li>安装ruby 2.3.3</li>
<li>安装Ruby DevKit</li>
<li>安装bundler</li>
</ol>
<pre><code class="language-Shell">gem install bundler
</code></pre>
<ol start="4">
<li>git clone git@github.com:telerik/docs-seed.git</li>
<li>打开Git Bash，输入cd /d/docs-seed-master</li>
<li>sh copy_local.sh &quot;d:\xaml-docs-master&quot;</li>
<li>CMD &quot;d:\xaml-docs-master&quot;</li>
<li>安装gems包</li>
</ol>
<pre><code class="language-Shell">bundle install
</code></pre>
<ol start="9">
<li>执行命令行</li>
</ol>
<pre><code class="language-Shell">bundle exec jekyll serve
</code></pre>
<h1 id="font-size3-̇-̇font"><font size=3>✧⁺⸜(●˙▾˙●)⸝⁺✧</font></h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[📣💨✨Vant Vue应用介绍01😎]]></title>
        <id>https://1078889045.github.io/post/vant-vue-ying-yong-jie-shao-01/</id>
        <link href="https://1078889045.github.io/post/vant-vue-ying-yong-jie-shao-01/">
        </link>
        <updated>2021-07-09T01:11:40.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>* 环境搭建可参考文章 <a href="https://1078889045.github.io/post/bct-vue-gao-qi/">📣💨✨BCT Vue搞起😎</a><br>
* 项目根文件夹最好不要有中文<br>
* 可使用HBuilder X或VS Code开发<br>
* 本Vue应用适应移动端，电脑调试可按F12进入开发者调试切换设备<br>
* 本Vue应用大部分控件使用了Vant，Table控件使用了Ant Design of Vue</p>
</blockquote>
<h1 id="项目结构">项目结构</h1>
<figure data-type="image" tabindex="1"><img src="https://1078889045.github.io/post-images/1626076107725.png" alt="" loading="lazy"></figure>
<h2 id="子项含义">子项含义</h2>
<ol>
<li>dist 打包输出文件夹</li>
<li>node_modules 安装的包文件夹</li>
</ol>
<pre><code class="language-Shell">    yarn add vant@3.0.0或者npm install vant@3.0.0 执行安装vant        
</code></pre>
<ol start="2">
<li>public 公共文件夹</li>
<li>src 代码文件夹<br>
+ api  接口定义<br>
+ components 公用控件<br>
+ enums 枚举<br>
+ routes 路由定义<br>
+ steup 初始化（暂时无用）<br>
+ utils 工具类<br>
+ views 路由指向控件<br>
- App.vue 项目入口（当前定义为router-view）<br>
- main.js 全局定义（例如引入vant的控件、样式等）</li>
<li>其它配置文件<br>
- .env （全局环境变量定义）<br>
- .env.development （开发环境变量定义）<br>
- .env.production （生产环境变量定义）<br>
- vite.config.js （可在其中修改开发端口、字符解析、打包输出文件夹和打包块定义等）</li>
</ol>
<h1 id="如何开发">如何开发</h1>
<h2 id="环境变量">环境变量</h2>
<ol>
<li>.env</li>
</ol>
<pre><code class="language-Python">    # APP标题
    VITE_APP_TITLE = BCT Vite应用
    # 启动端口号
    VITE_APP_PORT = 8080
    # 根路径
    VITE_APP_BASE_URL = '/'
    # 打包输出文件夹
    VITE_APP_OUTPUT_DIR = 'dist'
</code></pre>
<ol start="2">
<li>.env.development</li>
</ol>
<pre><code class="language-Python">    # 接口地址
    VITE_APP_BASE_API = '开发环境接口地址'
</code></pre>
<ol start="3">
<li>.env.production</li>
</ol>
<pre><code class="language-Python">    # 接口地址
    VITE_APP_BASE_API = '生产环境接口地址'
</code></pre>
<h2 id="如何添加路由和跳转页面">如何添加路由和跳转页面</h2>
<ol>
<li>在src/routes/routers.js中添加路由<pre><code class="language-JavaScript">     const routes = [
         {
             name: 'notFound',
             path: '/:path(.*)+',
             redirect: {
                 name: 'main',
             },
         },
         {
             name: 'main',
             path: '/main',
             component: () =&gt; import('/@/components/Main.vue'),
             meta: {
                 title: '主页',
             },
         },
         {
             name: 'planning',
             path: '/planning',
             component: () =&gt; import('/@/views/Planning/index.vue'),
             meta: {
                 title: '计划',
             },
         },
         {
             name: 'xxx',
             path: '/xxx',
             component: () =&gt; import('/@/views/xxx/index.vue'),
             meta: {
                 title: 'xxx',
             },
         },
     ];
</code></pre>
</li>
<li>在src/components/Main.vue新增按钮（当前使用了控件<u>van-grid-item</u>内置的to方法）</li>
</ol>
<pre><code class="language-XML">    &lt;van-grid-item icon=&quot;home-o&quot; text=&quot;新增&quot; to=&quot;新增路由path&quot; /&gt;
</code></pre>
<h2 id="如何定义接口及调用接口">如何定义接口及调用接口</h2>
<ol>
<li>在api/demo文件夹中添加一个ts文件进行接口定义</li>
</ol>
<pre><code class="language-JavaScript">    import { defHttp, otherHttp } from '/@/utils/http/axios';
    import { DemoParams, DemoListGetResultModel } from './model/tableModel';

    enum Api {
        DEMO_LIST = '/table/getDemoList',
    }

    /**
    * @description: Get sample list value
    */
    export function demoListApi(params: DemoParams) {
        return defHttp.request&lt;DemoListGetResultModel&gt;({
            url: Api.DEMO_LIST,
            method: 'GET',
            params,
            headers: {
            ignoreCancelToken: true,
            },
        });
    }
</code></pre>
<ol start="2">
<li>先引入接口定义，然后在页面调用</li>
</ol>
<pre><code class="language-JavaScript">    import { demoListApi } from '/@/api/demo/table';
    import { DemoListItem } from '/@/api/demo/table/model/tableModel';
    ...
    const methods = {};
    methods.search = async function(name) {
        dataContext.Loading = true;
        dataContext.selectedRowKeys = [];
        dataContext.Items = [];
        let response = [];

        try {
          if (name &amp;&amp; name != '') {
            // 调用接口
            response = await demoListApi({
                page: 2,
                pageSize: 5,
            });
            // 获取接口返回值，并处理
            const { items } = response;
            dataContext.Items = items;
            			
          }
		  
        } catch (e) {

          //异常处理
        } finally {

          setTimeout(() =&gt; {
            dataContext.Loading = false;
          }, 500);
        }
      };

</code></pre>
<h2 id="常用命令">常用命令</h2>
<ol>
<li>本地运行</li>
</ol>
<pre><code class="language-Shell">    yarn dev
</code></pre>
<p><img src="https://1078889045.github.io/post-images/1626076521038.png" alt="" loading="lazy"><br>
2. 打包发布，将生成的dist文件夹在IIS中发布即可</p>
<pre><code class="language-Shell">    yarn build
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://1078889045.github.io/post-images/1626076562917.png" alt="" loading="lazy"></figure>
<h1 id="参考文档">参考文档</h1>
<p><a href="https://vant-contrib.gitee.io/vant/#/zh-CN/home">Vant 2.12.22组件文档</a><br>
<a href="https://2x.antdv.com/components/overview-cn/">Ant Design of Vue 2.0.0组件文档</a><br>
<a href="https://cn.vuejs.org/">Vue3中文文档</a></p>
<h1 id="font-size3-̇-̇font"><font size=3>✧⁺⸜(●˙▾˙●)⸝⁺✧</font></h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[📣💨✨小技巧备忘录（04）搞起😎]]></title>
        <id>https://1078889045.github.io/post/xiao-ji-qiao-bei-wang-lu-04-gao-qi/</id>
        <link href="https://1078889045.github.io/post/xiao-ji-qiao-bei-wang-lu-04-gao-qi/">
        </link>
        <updated>2021-07-05T08:50:34.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>如何在Reporting Services中调用WebService？</p>
</blockquote>
<ol>
<li>创建WebService项目，并重新定义Namespace；<br>
<img src="https://1078889045.github.io/post-images/1625475179857.png" alt="" loading="lazy"></li>
<li>发布WebService项目，并且支持SOAP 1.1；</li>
<li>使用Report Builder 3.0创建报表；</li>
<li>在报表中添加DataSource，例如：<br>
<img src="https://1078889045.github.io/post-images/1625475706426.png" alt="" loading="lazy"></li>
<li>在报表中添加DataSet，例如：<br>
<img src="https://1078889045.github.io/post-images/1625475739589.png" alt="" loading="lazy"></li>
</ol>
<pre><code class="language-Visual">        &lt;Query xmlns=&quot;http://pom.org/&quot;&gt;
	        &lt;SoapAction&gt;http://pom.org/GetMaterials&lt;/SoapAction&gt;
        &lt;/Query&gt;
</code></pre>
<pre><code class="language-Visual">        &lt;Query&gt;
            &lt;Method Name=&quot;GetMaterials&quot; Namespace=&quot;http://pom.org&quot;&gt;
            &lt;Parameters&gt;
                &lt;Parameter Name=&quot;参数1&quot;&gt;
                    &lt;DefaultValue&gt;/&lt;/DefaultValue&gt;
                &lt;/Parameter&gt;
            &lt;/Parameters&gt;
            &lt;/Method&gt;
            &lt;ElementPath IgnoreNamespaces=&quot;true&quot;&gt;*&lt;/ElementPath&gt;
        &lt;/Query&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[📣💨✨BCT Report Server搞起😎 续02]]></title>
        <id>https://1078889045.github.io/post/bct-report-server-gao-qi-xu-02/</id>
        <link href="https://1078889045.github.io/post/bct-report-server-gao-qi-xu-02/">
        </link>
        <updated>2021-02-19T01:43:43.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>如何调用Web服务获取数据？</p>
</blockquote>
<h2 id="准备服务"><strong>准备服务</strong></h2>
<ol>
<li>首先用NodeJS（其它语言亦可）编写一个WebAPI测试服务（<font color=red>目前测试看上去不适用jwt认证或OAuth授权，推荐不需要验证的方式</font>）
<ul>
<li><code>app.js</code></li>
</ul>
<pre><code class="language-JavaScript">
    const express = require('express') //引入第三方express框架
    const app = express() //创建web服务
    const path = require('path') //路径管理模块
    var utilities = require('./utils/utilities.js');
    module.exports = app;
    //设置跨域访问
    app.all('*', function(req, res, next) {
        res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);
        res.header(&quot;Access-Control-Allow-Headers&quot;,
            &quot;Content-Type, Content-Length, Authorization, Accept, X-Requested-With, ignoreCancelToken&quot;);
        res.header(&quot;Access-Control-Allow-Methods&quot;, &quot;PUT,POST,GET,DELETE,OPTIONS&quot;);
        if (req.method == &quot;OPTIONS&quot;) {
            res.send(200);
        } else {
            next();
        }
    });
    app.use(express.static(path.join(__dirname, 'public'))) //静态资源管理
    const bodyParser = require('body-parser') //处理post接收值的第三模块
    app.use(bodyParser.urlencoded({
        extended: false
    })) //接收post传值中间件
    app.use(bodyParser.json()) //接收json传真中间件
    //配置使用cookie的
    const cookie = require('cookie-parser')
    app.use(cookie())
    //引入二级路由
    const table = require('./routes/table');
    //创建一级路由
    app.use('/table', table);
    var server = app.listen(12347, function() {
        var host = server.address().address
        var port = server.address().port
        console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, &quot;localhost&quot;, port)
    });

</code></pre>
<ul>
<li><code>table.js</code></li>
</ul>
<pre><code class="language-JavaScript">   
    var express = require('express');
    var table = express.Router();
    var db = require('../utils/db');
    var utilities = require('../utils/utilities.js');
    table.get('/getDemoList', function(req, res) {
        const page = req.query[&quot;page&quot;];
        const pageSize = req.query[&quot;pageSize&quot;];
        const field = req.query[&quot;field&quot;];
        const order = req.query[&quot;order&quot;];
        var sb = &quot; DECLARE @DataScope nvarchar(64); &quot;;
        sb += &quot; SET @DataScope = N'温度'; &quot;;
        sb += &quot; EXECUTE [dbo].[CalculateTrendline] @DataScope; &quot;;
        db.sql(sb, function(err, result) {
            if (err) {
                res.json(utilities.resultError({
                    message: err
                }));
                return;
            }
            var arr = result.recordsets[0];
            if (arr.length &gt; 0 &amp;&amp; order != null) {
                if (order == &quot;ascend&quot;) {
                    arr = arr.sort(function(a, b) {
                        return a[field] &gt; b[field] ? 1 : -1;
                    });
                } else if (order == &quot;descend&quot;) {
                    arr = arr.sort(function(a, b) {
                        return a[field] &lt; b[field] ? 1 : -1;
                    });
                }
            }
            if (page != null) {
                res.json(utilities.resultPageSuccess(page, pageSize, arr));            
            } else {
                res.json(utilities.resultSuccess({
                    items: arr,
                    total: arr.length
                }));
            }
        });
    });
</code></pre>
</li>
</ol>
<h2 id="如何设计"><strong>如何设计</strong></h2>
<ol>
<li>在设计报表时，添加<code>Web Service Data Source</code>，根据接口情况进行配置，然后拉取Table进行展示<br>
<img src="https://1078889045.github.io/post-images/1613613353260.png" alt="" loading="lazy"></li>
</ol>
<h2 id="如何使用"><strong>如何使用</strong></h2>
<ol>
<li>为<code>BCTWebReportServer</code>工程新增引用<code>Telerik.Reporting.WebServiceDataSource</code>，然后进行发布</li>
<li>将设计的报表拖入Reports文件夹即可</li>
</ol>
<h1 id="font-size3-̇-̇font"><font size=3>✧⁺⸜(●˙▾˙●)⸝⁺✧</font></h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[📣💨✨小技巧备忘录（03）搞起😎]]></title>
        <id>https://1078889045.github.io/post/xiao-ji-qiao-bei-wang-lu-03-gao-qi/</id>
        <link href="https://1078889045.github.io/post/xiao-ji-qiao-bei-wang-lu-03-gao-qi/">
        </link>
        <updated>2021-02-18T01:06:39.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>如何使用.NET SDK调用BarTender？</p>
</blockquote>
<ol>
<li>安装BarTender软件（<u>版本2016 R8</u>）</li>
<li>打开BarTender SDK文件夹，找到提供的<code>Seagull.BarTender.Print</code>类库<br>
<img src="https://1078889045.github.io/post-images/1612919699253.png" alt="" loading="lazy"></li>
<li>新建或打开.NET 4.0以上的C#程序，添加引用<code>Seagull.BarTender.Print</code>类库</li>
<li>使用BarTender Designer画好Label，编写代码调用，例如：</li>
</ol>
<pre><code class="language-C#">    // 实例化一个BarTender engine
    using (var engine = new Engine(true))
    {
        // 使用BarTender engine打开.btw文件生成一个LabelFormatDocument对象
        var format = engine.Documents.Open(labelPath);
        // 指定打印机
        format.PrintSetup.PrinterName = printerName;
        // 打印份数
        format.PrintSetup.IdenticalCopiesOfLabel = 1; 
        ...
        // 为数据源传值
        foreach (var keyValue in keyValues)
        {
            format.SubStrings.SetSubString(keyValue.Key, keyValue.Value);
        }
        Messages messages;
        // 使用LabelFormatDocument对象进行打印，并返回结果
        Result result = format.Print(printJobName, waitForCompletionTimeout, out messages);
        // 关闭LabelFormatDocument对象
        format.Close(SaveOptions.DoNotSaveChanges);
        // 打印结果处理
        ...

    }
</code></pre>
<h1 id="font-size3-̇-̇font"><font size=3>✧⁺⸜(●˙▾˙●)⸝⁺✧</font></h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[📣💨✨小技巧备忘录（02）搞起😎]]></title>
        <id>https://1078889045.github.io/post/xiao-ji-qiao-bei-wang-lu-02-gao-qi/</id>
        <link href="https://1078889045.github.io/post/xiao-ji-qiao-bei-wang-lu-02-gao-qi/">
        </link>
        <updated>2021-02-10T01:57:19.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>How to discern DM barcode with C#?<br>
<div  id='a' ></div></p>
</blockquote>
<ol>
<li>使用 <code>ZXing</code>类库和<code>DataMatrix.net</code>类库，对原图进行DM码识别</li>
</ol>
<pre><code class="language-C#">    // ZXing
    BarcodeReader reader = new BarcodeReader();
    Result result = reader.Decode(pImg);
</code></pre>
<pre><code class="language-C#">    // DataMatrix.net
    DmtxImageDecoder dmDecoder = new DmtxImageDecoder();
    List&lt;string&gt; resultList = dmDecoder.DecodeImage(pImg);
</code></pre>
<ol start="2">
<li>使用<code>OpenCvSharp</code>类库，对图像进行处理
<blockquote>
<ul>
<li>对图像进行灰度处理</li>
<li>建立图像的梯度幅值</li>
<li>对图像进行相应的模糊化，消除一些噪点</li>
<li>对图像进行形态学运算，消除缝隙</li>
<li>对图像进行腐蚀，然后进行膨胀，消除干扰</li>
<li>对目标轮廓进行查找，并计算图像面积</li>
<li>找出几个面积最大的矩形，并输出转换图</li>
</ul>
</blockquote>
</li>
<li>对转换图进行<a href="#a">1</a>相同操作</li>
<li>将识别结果去重保存</li>
</ol>
<h3 id="绘制流程图-flowchart暂不支持">绘制流程图 Flowchart（暂不支持）</h3>
<pre><code class="language-flow">st=&gt;start: 开始
op1=&gt;operation:  原图识别
op2=&gt;operation:  转换图识别
op3=&gt;operation:  转换
cond=&gt;condition: 转换成功 Yes or No?
e=&gt;end: 输出结果

st(right)-&gt;op1(right)-&gt;op3-&gt;cond(right)
cond(yes)-&gt;op2-&gt;e
cond(no)-&gt;e
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://1078889045.github.io/post-images/1612843471233.png" alt="" loading="lazy"></figure>
<h1 id="font-size3-̇-̇font"><font size=3>✧⁺⸜(●˙▾˙●)⸝⁺✧</font></h1>
]]></content>
    </entry>
</feed>